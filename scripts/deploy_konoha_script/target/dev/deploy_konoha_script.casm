ap += 18;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 119165820433268, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
%{ raise NotImplementedError %}
ap += 2;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 643;
jmp rel 629 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 608;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -7] + [ap + -5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 4] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 104493950585892423716267374, ap++;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 99999999999999999, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
call rel 724;
jmp rel 563 if [ap + -11] != 0;
jmp rel 548 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5579530408042154396948403807598, ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 99999999999999999, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
[fp + 16] = [ap + -18];
[fp + 17] = [ap + -17];
call rel 689;
jmp rel 508 if [ap + -11] != 0;
jmp rel 493 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 6085037515754271353, ap++;
[ap + 0] = 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 99999999999999999, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
[fp + 14] = [ap + -18];
[fp + 15] = [ap + -17];
call rel 654;
jmp rel 453 if [ap + -11] != 0;
jmp rel 438 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 337344140226814100267877, ap++;
[ap + 0] = 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 99999999999999999, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
[fp + 12] = [ap + -18];
[fp + 13] = [ap + -17];
call rel 619;
jmp rel 398 if [ap + -11] != 0;
jmp rel 383 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 16] = [[ap + -1] + 0];
[fp + 14] = [[ap + -1] + 1];
[fp + 12] = [[ap + -1] + 2];
[ap + 0] = 366469272113, ap++;
[ap + -1] = [[ap + -2] + 3];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 119126769218705719715728730306963485209318281414986141721475564414778175092, ap++;
[ap + 0] = 31, ap++;
call rel 912;
[fp + 9] = [ap + -123];
[fp + 10] = [ap + -123] + 4;
jmp rel 348 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 125762605955616, ap++;
[ap + 0] = 6, ap++;
call rel 896;
jmp rel 328 if [ap + -5] != 0;
[fp + 11] = [ap + -245];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -256], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 2020;
jmp rel 309 if [ap + -6] != 0;
jmp rel 31 if [ap + -1] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 10, ap++;
[ap + 0] = 1, ap++;
call rel 869;
jmp rel 11 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 18;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 120;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = 1, ap++;
[fp + 5] = [ap + -5];
[fp + 6] = [ap + -4];
[fp + 7] = [ap + -3];
[fp + 8] = [ap + -2];
jmp rel 250 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 6] = [ap + 0] + [fp + 5], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 2113;
jmp rel 225 if [ap + -3] != 0;
[fp + 7] = [[ap + -1] + 0];
[fp + 8] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
%{
curr = memory[ap + -2]
end = memory[ap + -1]
while curr != end:
    print(hex(memory[curr]))
    curr += 1
%}
ap += 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [fp + 9], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 99999999999999999, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 4], ap++;
call rel 2140;
jmp rel 179 if [ap + -11] != 0;
jmp rel 164 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 120845707719568029841423795814620060056944963519072222232743885721157395827, ap++;
[ap + 0] = 31, ap++;
call rel 762;
jmp rel 140 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 7551520, ap++;
[ap + 0] = 3, ap++;
call rel 749;
jmp rel 120 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 1874;
jmp rel 102 if [ap + -6] != 0;
jmp rel 31 if [ap + -1] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 10, ap++;
[ap + 0] = 1, ap++;
call rel 723;
jmp rel 11 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 18;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 120;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = [ap + -126], ap++;
[ap + 0] = 1, ap++;
[fp + 0] = [ap + -5];
[fp + 1] = [ap + -4];
[fp + 2] = [ap + -3];
[fp + 3] = [ap + -2];
jmp rel 43 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1967;
jmp rel 18 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
%{
curr = memory[ap + -2]
end = memory[ap + -1]
while curr != end:
    print(hex(memory[curr]))
    curr += 1
%}
ap += 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30828113188794245257250221355944970489240709081949230, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7954210149182083280513018914148, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30828113188794245257250221355944970489240709081949230, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -256], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2036273774819248336632951815824740, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2036273774819248336632951815824740, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2036273774819248336632951815824740, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2036273774819248336632951815824740, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 7;
ap += 6;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 0, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -2] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 107;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
[ap + -3] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -6] + 1];
jmp rel 76;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -2] + [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -2] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -6] + 2];
jmp rel 49;
[ap + -3] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -6] + 2];
[ap + -8] = [ap + 0] + 1, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -4] + [ap + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -6], ap++;
jmp rel 32 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 2158;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
ap += 6;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -14] = [ap + 0] + [fp + -15], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
call rel 1600;
jmp rel 282 if [ap + -3] != 0;
[fp + -13] = [[ap + -1] + 0];
[fp + -12] = [[ap + -1] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 2127;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27] + 2, ap++;
jmp rel 11 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[fp + 4] = [ap + -8];
[fp + 5] = [ap + -7];
call rel 2029;
jmp rel 210 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
call rel 2019;
jmp rel 177 if [ap + -3] != 0;
%{ raise NotImplementedError %}
ap += 2;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -210;
jmp rel 144 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 2151;
jmp rel 113 if [ap + -14] != 0;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 161330229554913911899339211764871765057999018164588257810867556, ap++;
[ap + 0] = 26, ap++;
call rel 196;
jmp rel 56 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 0] = [ap + -6];
[fp + 1] = [ap + -5];
[fp + 2] = [ap + -4];
[fp + 3] = [ap + -3];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1467;
jmp rel 9 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 1122;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 1095;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 939;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + -5] = [ap + 0] + 31, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 791;
[ap + 0] = 31, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 762;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + -2] = [ap + 0] + 16, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 555;
[ap + 0] = 16, ap++;
[ap + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 269;
[ap + -1] = [[ap + -5] + 0];
ap += 15;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + 3] = [[ap + -22] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -26] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -21] + 1];
ap += 5;
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + -31] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 198;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2145;
jmp rel 183 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 42;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 187;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -18], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -25] = [ap + -3] + [ap + -1];
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 127;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -4] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -31], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 5];
jmp rel 47;
[ap + -1] = [[ap + -19] + 5];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 6];
jmp rel 22;
[ap + -1] = [[ap + -22] + 6];
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 2070;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 2035;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -30] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 269;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 42;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 35;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
jmp rel 14;
ap += 55;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + 3] = [[ap + -8] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -12] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -7] + 1];
ap += 5;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 1893;
jmp rel 221 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 59;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 211;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -16], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -23] = [ap + -3] + [ap + -1];
[ap + 0] = 16, ap++;
[ap + -1] = [ap + 1] + [ap + -38], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 165;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -14] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1843;
jmp rel 150 if [ap + -3] != 0;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 126;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -42] * [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -24], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 47;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 2];
jmp rel 22;
[ap + -1] = [[ap + -15] + 2];
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1801;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 1766;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -23] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 220;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 49;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 42;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
ap += 37;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
jmp rel 21;
ap += 48;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 7;
ap += 61;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -47] + 0], ap++;
[ap + 3] = [[ap + -48] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -52] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -47] + 0];
ap += 5;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 130;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 47;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 22;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1581;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 86;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 72;
ap += 2;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 1546;
jmp rel 58 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -27] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 28;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 14;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 90;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -98] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 64;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -70] + 0];
jmp rel 47;
[ap + -1] = [[ap + -69] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -73] + 1];
jmp rel 22;
[ap + -1] = [[ap + -72] + 1];
[ap + 0] = [ap + -72] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1411;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 88;
ap += 20;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -95] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 74;
ap += 2;
[ap + 0] = [ap + -72] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 1376;
jmp rel 60 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 3;
[ap + -9] = [[fp + -7] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [fp + -9] + 2, ap++;
[fp + -5] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 124;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 47;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 22;
[ap + -1] = [[ap + -8] + 1];
[ap + 0] = [ap + -8] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1264;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 73;
ap += 15;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 59;
ap += 2;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 1229;
jmp rel 45 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 18;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [fp + -6] * [ap + -5], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 99;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 104;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
[ap + 0] = 10, ap++;
jmp rel 21 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -7] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -7], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 0], ap++;
[ap + 3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -7] = [[fp + -9] + 0];
ap += 5;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -12] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -13], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -6] + 0], ap++;
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -16] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -11] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -13] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 16 if [ap + -2] != 0;
jmp rel 14 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 31;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 1134;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 47;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -42;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
ap += 12;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -17] = [[ap + -1] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -15] = [ap + 0] + [fp + -16], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[fp + 10] = [ap + -9];
[fp + 11] = [ap + -9] + 1;
call rel 1212;
jmp rel 368 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 11 if [fp + -14] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -13] = [[ap + -2] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 425;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 8] = [ap + -27];
[fp + 9] = [ap + -26];
[fp + 6] = [ap + -3];
[fp + 7] = [ap + -2];
jmp rel 11 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -3] = [[ap + -2] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [fp + 10], ap++;
[ap + 0] = [fp + 11], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[fp + 4] = [ap + -8];
[fp + 5] = [ap + -7];
call rel 326;
jmp rel 278 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 8], ap++;
[ap + 0] = [fp + 9], ap++;
call rel 316;
jmp rel 245 if [ap + -3] != 0;
[fp + -12] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 7], ap++;
call rel 304;
jmp rel 210 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
call rel 294;
jmp rel 177 if [ap + -3] != 0;
%{ raise NotImplementedError %}
ap += 2;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel -1935;
jmp rel 144 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
call rel 1161;
jmp rel 113 if [ap + -14] != 0;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 630197454372008874922095183721372834142248229104249530508644, ap++;
[ap + 0] = 25, ap++;
call rel -1529;
jmp rel 56 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 0] = [ap + -6];
[fp + 1] = [ap + -5];
[fp + 2] = [ap + -4];
[fp + 3] = [ap + -3];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel -258;
jmp rel 9 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 47;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
call rel -42;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
jmp rel 27 if [fp + -11] != 0;
ap += 6;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 10 if [fp + -6] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -5] = [[ap + -2] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 11 if [fp + -10] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -9] = [[ap + -2] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 11 if [fp + -8] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -7] = [[ap + -2] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
jmp rel 8;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 10 if [fp + -6] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -5] = [[ap + -2] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 295 if [ap + -2] != 0;
jmp rel 158 if [ap + -1] != 0;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 71 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 53;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 28;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 17;
[ap + 0] = [fp + -6] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 60;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 104 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 891;
jmp rel 67 if [ap + -13] != 0;
jmp rel 36 if [ap + -10] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 111;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel [ap + -2];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 573087285299505011920718992710461799, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 5;
[ap + 0] = [fp + -12], ap++;
jmp rel 171;
%{ memory[ap + 0] = memory[fp + -4] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 162;
[ap + 0] = [fp + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -12] + 0];
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 1];
jmp rel 21;
[ap + -1] = [[fp + -12] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 130770336871384315582580298231695941681, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -12] + 2, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = 36, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 2];
jmp rel 102;
[ap + -1] = [[fp + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 10, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -12] + 3];
jmp rel 33;
[ap + -1] = [[fp + -12] + 3];
[ap + 0] = [fp + -12] + 4, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 957;
jmp rel 8 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 30;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -12] + 4, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 1151;
jmp rel 34 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 1436;
jmp rel 11 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8570164797203042506019982424912417129509686, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [fp + -12] + 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 47;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -42;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 295 if [ap + -2] != 0;
jmp rel 158 if [ap + -1] != 0;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 71 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 53;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 28;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 17;
[ap + 0] = [fp + -6] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 60;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 104 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 156;
jmp rel 67 if [ap + -13] != 0;
jmp rel 36 if [ap + -10] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 388 if [ap + -2] != 0;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 1031;
jmp rel 51 if [ap + -8] != 0;
jmp rel 22 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 257;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 943;
jmp rel 51 if [ap + -8] != 0;
jmp rel 22 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 169;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 1063;
jmp rel 47 if [ap + -12] != 0;
jmp rel 18 if [ap + -9] != 0;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 85;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 1249;
jmp rel 64 if [ap + -11] != 0;
jmp rel 35 if [ap + -8] != 0;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 9560 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768201896, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 201;
[fp + -9] = [ap + 0] + 9560, ap++;
[ap + -1] = [[fp + -10] + 0];
%{
dividend = memory[fp + -8] + memory[fp + -7] * 2**128
divisor = memory[fp + -6] + memory[fp + -5] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -10] + 1], ap++;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 3], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -6] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -10] + 5];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -10] + 5];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -6], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -8], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -5] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -5], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -5], ap++;
jmp rel 12;
[fp + -5] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -6] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -6], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -6];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -10] + 6];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -7] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 7], ap++;
[ap + -2] = [[fp + -10] + 8], ap++;
[ap + -2] = [[fp + -10] + 9];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -6], ap++;
[ap + 0] = [ap + -4] * [fp + -6], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 10], ap++;
[ap + -1] = [[fp + -10] + 11], ap++;
[ap + -3] = [[fp + -10] + 12];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 13], ap++;
[ap + -3] = [[fp + -10] + 14], ap++;
[ap + -27] = [[fp + -10] + 15];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [fp + -10] + 16, ap++;
[ap + -32] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 7;
ap += 2;
[ap + 0] = [ap + -4], ap++;
jmp rel 88;
%{ memory[ap + 0] = memory[ap + -34] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -35] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -4] + 0];
jmp rel 79;
[ap + 0] = [ap + -35] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = 48, ap++;
%{ memory[ap + 0] = (memory[ap + -37] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -38] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -8] + 1];
jmp rel 48;
[ap + 1] = [ap + -38] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -8] + 1];
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -8] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -45] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
ap += 1;
jmp rel 8;
[ap + -45] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel -157;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -4] + 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = 10700 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768200756, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 274;
[fp + -9] = [ap + 0] + 10700, ap++;
[ap + -1] = [[fp + -10] + 0];
%{
dividend = memory[fp + -8] + memory[fp + -7] * 2**128
divisor = memory[fp + -6] + memory[fp + -5] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -10] + 1], ap++;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 3], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[fp + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[fp + -6] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -10] + 5];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -10] + 5];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[fp + -6], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -8], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[fp + -5] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [fp + -5], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [fp + -5], ap++;
jmp rel 12;
[fp + -5] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[fp + -6] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [fp + -6], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [fp + -6];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -10] + 6];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -7] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 7], ap++;
[ap + -2] = [[fp + -10] + 8], ap++;
[ap + -2] = [[fp + -10] + 9];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -6], ap++;
[ap + 0] = [ap + -4] * [fp + -6], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -10] + 10], ap++;
[ap + -1] = [[fp + -10] + 11], ap++;
[ap + -3] = [[fp + -10] + 12];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -10] + 13], ap++;
[ap + -3] = [[fp + -10] + 14], ap++;
[ap + -27] = [[fp + -10] + 15];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [fp + -10] + 16, ap++;
[ap + -32] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 7;
ap += 2;
[ap + 0] = [ap + -4], ap++;
jmp rel 161;
%{ memory[ap + 0] = memory[ap + -34] < 256 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -35] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -4] + 0];
jmp rel 152;
[ap + 0] = [ap + -35] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = 10, ap++;
[ap + -37] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 1];
jmp rel 59;
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = 10, ap++;
[ap + -40] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 2];
jmp rel 34;
[ap + -1] = [[ap + -10] + 2];
[ap + 0] = 97, ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 3];
jmp rel 11;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 3];
[ap + 0] = [ap + -14] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 4, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 85;
ap += 3;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642109794502019480482122260311927, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 71;
ap += 2;
[ap + 0] = 48, ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 49;
[ap + 1] = [ap + -44] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + -52] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 6;
ap += 1;
jmp rel 8;
[ap + -52] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
call rel -227;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4] + 1, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
%{ memory[ap + 0] = 5880 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768205576, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 76;
[fp + -9] = [ap + 0] + 5880, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[fp + -7] = [ap + 0] + [fp + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -8], ap++;
[fp + -7] = [ap + 0] + 1, ap++;
[ap + 0] = 0, ap++;
[fp + -7] = [ap + 0] + 1, ap++;
jmp rel 8;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 38 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
call rel 794;
jmp rel 13 if [ap + -5] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -52;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 41 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 825;
jmp rel 11 if [ap + -6] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 29;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -3] != 0;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -9] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 83 if [ap + -2] != 0;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 8;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 43 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -19] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
jmp rel 79 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 742;
jmp rel 46 if [ap + -9] != 0;
jmp rel 19 if [ap + -6] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 105;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 24 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 29;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 92 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 136;
jmp rel 59 if [ap + -11] != 0;
jmp rel 32 if [ap + -8] != 0;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 211 if [ap + -2] != 0;
jmp rel 72 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 625;
jmp rel 41 if [ap + -10] != 0;
jmp rel 16 if [ap + -7] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 100;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 22 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 30;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 88 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel -603;
jmp rel 57 if [ap + -8] != 0;
jmp rel 32 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 109;
[ap + 0] = [fp + -5] * 256, ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[fp + -4] = [ap + 0] + 30, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 46;
ap += 2;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -4] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 17;
[ap + 1] = [fp + -4] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 2;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 4] = memory[ap + -2] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[fp + -8] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -3], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[fp + -8] + 2];
ap += 3;
[ap + -10] = [[fp + -6] + 0];
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 11;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = 3380 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208076, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 97;
[fp + -8] = [ap + 0] + 3380, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
jmp rel 13 if [fp + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 8;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 43 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -12] + 2];
[ap + -6] = [[fp + -4] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -80;
ret;
[ap + 0] = [ap + -13] + 3, ap++;
jmp rel 5;
ap += 7;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 26;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel -1024;
jmp rel 47 if [ap + -8] != 0;
jmp rel 26 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 746 if [ap + -2] != 0;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 21 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 21, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943316, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 708 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -6] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211435, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010261, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -6] + 2, ap++;
jmp rel [ap + -2];
jmp rel 614;
jmp rel 594;
jmp rel 574;
jmp rel 554;
jmp rel 534;
jmp rel 514;
jmp rel 494;
jmp rel 474;
jmp rel 406;
jmp rel 386;
jmp rel 366;
jmp rel 346;
jmp rel 326;
jmp rel 188;
jmp rel 120;
jmp rel 100;
jmp rel 80;
jmp rel 60;
jmp rel 40;
jmp rel 20;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 41, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 580;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 39, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 562;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 544;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 526;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 33, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 508;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 31, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 490;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -1334;
jmp rel 39 if [ap + -8] != 0;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 466;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 65 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[fp + 0] = [ap + -5];
call rel -1422;
jmp rel 35 if [ap + -8] != 0;
jmp rel 15 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 57;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 39;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -6] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 27, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 309;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 270;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 252;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 234;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 216;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -1608;
jmp rel 39 if [ap + -8] != 0;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 17, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 192;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 132;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 114;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 96;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 78;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 60;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 42;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 24;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -1800;
jmp rel 52 if [ap + -8] != 0;
jmp rel 29 if [ap + -5] != 0;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
